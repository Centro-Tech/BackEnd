name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-backend: # Nome do job √∫nico, focado no backend
    runs-on: ubuntu-latest
    
    steps:
      # 1Ô∏è‚É£ Checkout do c√≥digo
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Java/Maven
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3Ô∏è‚É£ Build do backend
      - name: BE - Compilar projeto
        run: |
          echo "üèóÔ∏è Iniciando build do backend..."
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests
          echo "‚úÖ Build conclu√≠do com sucesso."

      # 4Ô∏è‚É£ Criar chave SSH para o runner
      - name: Criar chave SSH
        run: |
          echo "üîß Criando chave SSH para o runner..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          echo "‚úÖ Chave criada."

      # 5Ô∏è‚É£ NOVO! Criar script de deploy para Host B
      - name: Criar script de deploy para Host B
        run: |
          echo "Criando script de deploy..."
          PROJETO_DIR="Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          
          # Garante que o diret√≥rio existe ANTES de tentar escrever nele
          mkdir -p "$PROJETO_DIR"
          
          # --- !! CORRE√á√ÉO AQUI !! ---
          # Colocamos "$PROJETO_DIR/deploy_on_b.sh" entre aspas
          cat << 'EOF' > "$PROJETO_DIR/deploy_on_b.sh"
          #!/bin/bash
          set -e
          
          # --- ESTE SCRIPT RODA DENTRO DO HOST B ---
          
          # $HOME ser√° /home/ec2-user (ou qualquer que seja o usu√°rio)
          PROJETO_DIR="$HOME/backend"
          LOG_DIR="$PROJETO_DIR/logs"
          LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"

          mkdir -p $LOG_DIR
          
          # Redireciona toda a sa√≠da (stdout/stderr) para o log E para o console
          exec > >(tee -a "$LOG_FILE") 2>&1
          
          echo "...[Host B] Iniciando deploy no host_b..."
          echo "...[Host B] Rodando como usu√°rio: $(whoami) em $(pwd)"

          # --- L√ìGICA DE INSTALA√á√ÉO DO DOCKER ---
          if ! command -v docker &> /dev/null; then
            echo "...[Host B] ‚öôÔ∏è Docker n√£o encontrado. Instalando Docker..."
            if command -v amazon-linux-extras &> /dev/null; then
              echo "...[Host B] Detectado Amazon Linux 2. Usando 'amazon-linux-extras'...."
              sudo amazon-linux-extras install docker -y
            elif command -v dnf &> /dev/null; then
              echo "...[Host B] Detectado RHEL/Fedora/AL2023. Usando 'dnf'...."
              sudo dnf install -y docker
            elif command -v apt-get &> /dev/null; then
              echo "...[Host B] Detectado Debian/Ubuntu. Usando 'apt-get'...."
              sudo apt-get update && sudo apt-get install -y docker.io
            elif command -v yum &> /dev/null; then
              echo "...[Host B] Detectado RHEL/CentOS. Usando 'yum'...."
              sudo yum install -y docker
            else
              echo "...[Host B] ERRO: N√£o foi poss√≠vel determinar o gerenciador de pacotes." && exit 1
            fi
            
            echo "...[Host B] Iniciando e ativando o servi√ßo Docker..."
            sudo systemctl enable docker
            sudo systemctl start docker
            (sudo usermod -aG docker $USER || echo "...[Host B] Aviso: Falha ao adicionar $USER ao grupo docker. Usando sudo.")
            echo "...[Host B] ‚úÖ Docker instalado."
          else
            echo "...[Host B] ‚úÖ Docker j√° est√° instalado."
          fi
          # ----------------------------------------
          
          cd $PROJETO_DIR
          echo "...[Host B] üõë Parando containers antigos..."
          (sudo docker stop mimastore-backend || true)
          (sudo docker rm mimastore-backend || true)
          
          echo "...[Host B] üèóÔ∏è Buildando nova imagem Docker..."
          sudo docker build -t mimastore-backend .
          
          echo "...[Host B] üöÄ Subindo novo container..."
          sudo docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend
          
          echo "...[Host B] ‚úÖ Backend (host_b) atualizado e rodando!"
          
          EOF
          
          echo "Script criado em $PROJETO_DIR/deploy_on_b.sh"
          # D√° permiss√£o de execu√ß√£o para o script
          chmod +x "$PROJETO_DIR/deploy_on_b.sh"
          
     # 6Ô∏è‚É£ Deploy do Backend no Host B (via Host A)
      - name: BE - Deploy no Host Privado (via Bastion)
        run: |
          set -e
          set -o pipefail

          mkdir -p logs
          
          HOST_A=${{ secrets.REMOTE_HOST }}
          HOST_B=${{ secrets.REMOTE_HOST_B }}
          USER=${{ secrets.REMOTE_USER }}        # This should be 'ec2-user'
          KEY_PATH=~/.ssh/private_key.pem

          echo "üõ∞Ô∏è Iniciando deploy do BACKEND para host_b ($HOST_B) via host_a ($HOST_A)..."
          
          echo "üì¶ [1/3] Enviando c√≥digo (com script) para host_a (bastion)..."
          rsync -rltgoDzvO --delete \
            -e "ssh -i $KEY_PATH -o StrictHostKeyChecking=no" \
            "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima/" \
            "$USER@$HOST_A:/home/$USER/backend_temp_deploy" \
            | tee logs/rsync_to_a.log

          echo "üîÑ [2/3] Conectando no host_a e disparando deploy de ARQUIVOS para host_b..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no $USER@$HOST_A "\
              set -e && \
              mkdir -p ~/logs && \
              echo '...[Host A] Copiando chave para o bastion...' && \
              echo '${{ secrets.EC2_SSH_KEY }}' > ~/private_key.pem && chmod 600 ~/private_key.pem && \
              echo '...[Host A] Copiando arquivos (com script) de bastion -> host_b ($HOST_B)...' && \
              rsync -rltgoDzvO --delete \
                -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no' \
                /home/$USER/backend_temp_deploy/ \
                $USER@$HOST_B:/home/$USER/backend" \
            | tee logs/rsync_to_b.log

          echo "üöÄ [3/3] Conectando no host_a e disparando EXECU√á√ÉO do script no host_b..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no $USER@$HOST_A "\
              set -e && \
              echo '...[Host A] Conectando no host_b ($HOST_B) para executar o deploy_on_b.sh...' && \
              \
              # --- !! CORRE√á√ÉO AQUI !! ---
              # Usamos /home/$USER/backend/ explicitly, em vez de $HOME/backend/
              ssh -i ~/private_key.pem -o StrictHostKeyChecking=no $USER@$HOST_B 'bash /home/$USER/backend/deploy_on_b.sh' \
            " | tee logs/deploy_docker_on_b.log

          echo "‚úÖ Deploy finalizado para host_b"
