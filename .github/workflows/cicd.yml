name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: ["host_a", "host_b"] # deploy nas duas inst√¢ncias

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Build do backend com Maven
      - name: BE - Compilar projeto
        run: |
          cd BackEnd
          mvn clean package -DskipTests

      # 3Ô∏è‚É£ Mapear o host literal para o secret real
      - name: Definir host real
        id: set_host
        run: |
          if [ "${{ matrix.host }}" = "host_a" ]; then
            echo "HOST_REAL=${{ secrets.REMOTE_HOST }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> $GITHUB_ENV
          else
            echo "HOST_REAL=${{ secrets.REMOTE_HOST_B }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.EC2_SSH_KEY_PRIVATE }}" >> $GITHUB_ENV
          fi

      # 4Ô∏è‚É£ Copiar c√≥digo-fonte para a EC2
      - name: BE - Copiar arquivos via SSH (rsync)
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ env.SSH_KEY }}
          REMOTE_HOST: ${{ env.HOST_REAL }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/${{ secrets.REMOTE_USER }}/backend
          SOURCE: "BackEnd/"
          ARGS: "-rltgoDzvO --delete"

      # 5Ô∏è‚É£ Buildar e rodar o container Docker
      - name: BE - Buildar imagem e subir container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOST_REAL }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo "üöÄ Subindo backend MimaStore na EC2..."

            # Instalar Docker se necess√°rio
            if ! command -v docker &> /dev/null; then
              echo "‚öôÔ∏è Instalando Docker..."
              sudo yum install -y docker || sudo dnf install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            cd /home/${{ secrets.REMOTE_USER }}/backend

            # Parar containers antigos
            docker stop mimastore-backend || true
            docker rm mimastore-backend || true

            # Buildar e rodar nova imagem
            docker build -t mimastore-backend .
            docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend

            echo "‚úÖ Backend atualizado e rodando!"
