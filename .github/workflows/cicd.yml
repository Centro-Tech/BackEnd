name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: ["host_a", "host_b"]

    steps:
      # 1Ô∏è‚É£ Checkout do c√≥digo
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Java/Maven
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3Ô∏è‚É£ Build do backend
      - name: BE - Compilar projeto
        run: |
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests

      # 4Ô∏è‚É£ Definir host e reconstruir chave SSH
      - name: Definir host real e chave SSH
        id: set_host
        run: |
          if [ "${{ matrix.host }}" = "host_a" ]; then
            echo "HOST_REAL=${{ secrets.REMOTE_HOST }}" >> $GITHUB_ENV
            echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > private_key.pem
          else
            echo "HOST_REAL=${{ secrets.REMOTE_HOST_B }}" >> $GITHUB_ENV
            echo "${{ secrets.EC2_SSH_KEY_PRIVATE }}" | sed 's/\\n/\n/g' > private_key.pem
          fi

          chmod 600 private_key.pem
          echo "SSH_KEY_PATH=$PWD/private_key.pem" >> $GITHUB_ENV
          echo "‚úÖ Chave SSH pronta para ${{ matrix.host }}"

      # 5Ô∏è‚É£ Deploy para host_a (p√∫blica) ou via jump host para host_b
      - name: BE - Copiar arquivos e deploy
        run: |
          HOST_A=${{ secrets.REMOTE_HOST }}
          if [ "${{ matrix.host }}" = "host_a" ]; then
          echo "üöÄ Deploy direto para host_a ($HOST_A)"
          rsync -rltgoDzvO --delete -e "ssh -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no" \
          "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima/" \
          "${{ secrets.REMOTE_USER }}@${{ env.HOST_REAL }}:/home/${{ secrets.REMOTE_USER }}/backend"
          else
          echo "üöÄ Host_b √© privada. Deploy via host_a ($HOST_A)"
          ssh -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@$HOST_A \
          "rsync -rltgoDzvO --delete -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no' \
          /home/${{ secrets.REMOTE_USER }}/backend/ ${{ secrets.REMOTE_USER }}@${{ env.HOST_REAL }}:/home/${{ secrets.REMOTE_USER }}/backend"
          fi

      # 6Ô∏è‚É£ Buildar e subir container Docker remotamente
      - name: BE - Buildar imagem e rodar container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOST_REAL }}
          username: ${{ secrets.REMOTE_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          script: |
            echo "üöÄ Subindo backend MimaStore na EC2 $HOST_REAL..."

            # Instalar Docker se necess√°rio
            if ! command -v docker &> /dev/null; then
              echo "‚öôÔ∏è Instalando Docker..."
              if [ -x "$(command -v yum)" ]; then
                sudo yum install -y docker
              elif [ -x "$(command -v dnf)" ]; then
                sudo dnf install -y docker
              elif [ -x "$(command -v apt-get)" ]; then
                sudo apt-get update && sudo apt-get install -y docker.io
              fi
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            cd /home/${{ secrets.REMOTE_USER }}/backend

            # Parar containers antigos
            docker stop mimastore-backend || true
            docker rm mimastore-backend || true

            # Buildar nova imagem
            docker build -t mimastore-backend .
            docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend

            echo "‚úÖ Backend atualizado e rodando em $HOST_REAL!"
