name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: ["host_a", "host_b"] # deploy nas duas inst√¢ncias

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar ambiente Java/Maven
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3Ô∏è‚É£ Build do backend
      - name: BE - Compilar projeto
        run: |
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests

     # 4Ô∏è‚É£ Mapear o host e as chaves
      - name: Definir host real e chaves
        id: set_host
        run: |
          if [ "${{ matrix.host }}" = "host_a" ]; then
            echo "HOST_REAL=${{ secrets.REMOTE_HOST }}" >> $GITHUB_ENV
            echo "SSH_KEY_RAW=${{ secrets.EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "SSH_KEY_MULTILINE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "HOST_REAL=${{ secrets.REMOTE_HOST_B }}" >> $GITHUB_ENV
            echo "SSH_KEY_RAW=${{ secrets.EC2_SSH_KEY_PRIVATE }}" >> $GITHUB_ENV
            echo "SSH_KEY_MULTILINE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.EC2_SSH_KEY_PRIVATE }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
     # 5Ô∏è‚É£ Copiar arquivos para EC2 via SSH (rsync)
      - name: BE - Copiar arquivos via SSH (rsync)
        run: |
          echo "üîß Preparando chave SSH..."
          mkdir -p ~/.ssh
          echo "${{ env.SSH_KEY_MULTILINE }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 400 ~/.ssh/deploy_key

          echo "üöÄ Iniciando c√≥pia de arquivos para ${{ env.HOST_REAL }} ..."
          
          # Comando rsync corrigido: em linha √∫nica e copiando da pasta fonte
          rsync -rltgoDzvO --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima/" ${{ secrets.REMOTE_USER }}@${{ env.HOST_REAL }}:/home/${{ secrets.REMOTE_USER }}/backend
      
      # 6Ô∏è‚É£ Buildar e subir container Docker remotamente
      - name: BE - Buildar imagem e subir container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOST_REAL }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ env.SSH_KEY_RAW }}
          script: |
            echo "üöÄ Subindo backend MimaStore na EC2..."

            # Instalar Docker se necess√°rio
            if ! command -v docker &> /dev/null; then
              echo "‚öôÔ∏è Instalando Docker..."
              if [ -x "$(command -v yum)" ]; then
                sudo yum install -y docker
              elif [ -x "$(command -v dnf)" ]; then
                sudo dnf install -y docker
              elif [ -x "$(command -v apt-get)" ]; then
                sudo apt-get update && sudo apt-get install -y docker.io
              fi
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            cd /home/${{ secrets.REMOTE_USER }}/backend

            # Parar containers antigos
            docker stop mimastore-backend || true
            docker rm mimastore-backend || true

            # Buildar e rodar nova imagem
            docker build -t mimastore-backend .
            docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend

            echo "‚úÖ Backend atualizado e rodando!"
