name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: ["host_a", "host_b"] # deploy nas duas inst√¢ncias

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar ambiente Java/Maven
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3Ô∏è‚É£ Build do backend
      - name: BE - Compilar projeto
        run: |
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests

       # 4Ô∏è‚É£ Mapear o host e configurar chave SSH corretamente
      - name: Definir host real e chave
        id: set_host
        run: |
          if [ "${{ matrix.host }}" = "host_a" ]; then
          echo "HOST_REAL=${{ secrets.REMOTE_HOST }}" >> $GITHUB_ENV
          echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > private_key.pem
          else
          echo "HOST_REAL=${{ secrets.REMOTE_HOST_B }}" >> $GITHUB_ENV
          echo "${{ secrets.EC2_SSH_KEY_PRIVATE }}" | sed 's/\\n/\n/g' > private_key.pem
          fi
          chmod 600 private_key.pem
          echo "SSH_KEY_PATH=$PWD/private_key.pem" >> $GITHUB_ENV

          echo "‚úÖ Chave SSH gravada e permiss√µes aplicadas"
          echo "Host configurado: ${{ matrix.host }}"
      
          echo "----- In√≠cio da chave -----"
          head -n 3 private_key.pem
          echo "----- Fim da pr√©via -----"

     
     # 5Ô∏è‚É£ Copiar arquivos para EC2 via SSH (rsync)
      - name: BE - Copiar arquivos via SSH (rsync)
        run: |
          echo "üöÄ Iniciando c√≥pia de arquivos para ${{ env.HOST_REAL }} ..."
          rsync -rltgoDzvO --delete -e "ssh -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no" \
          "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima/" \
          "${{ secrets.REMOTE_USER }}@${{ env.HOST_REAL }}:/home/${{ secrets.REMOTE_USER }}/backend"
      
      # 6Ô∏è‚É£ Buildar e subir container Docker remotamente
      - name: BE - Buildar imagem e subir container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOST_REAL }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üöÄ Subindo backend MimaStore na EC2..."

            # Instalar Docker se necess√°rio
            if ! command -v docker &> /dev/null; then
              echo "‚öôÔ∏è Instalando Docker..."
              if [ -x "$(command -v yum)" ]; then
                sudo yum install -y docker
              elif [ -x "$(command -v dnf)" ]; then
                sudo dnf install -y docker
              elif [ -x "$(command -v apt-get)" ]; then
                sudo apt-get update && sudo apt-get install -y docker.io
              fi
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            cd /home/${{ secrets.REMOTE_USER }}/backend

            # Parar containers antigos
            docker stop mimastore-backend || true
            docker rm mimastore-backend || true

            # Buildar e rodar nova imagem
            docker build -t mimastore-backend .
            docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend

            echo "‚úÖ Backend atualizado e rodando!"
