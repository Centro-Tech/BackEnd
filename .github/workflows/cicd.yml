name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-backend: # Nome do job único, focado no backend
    runs-on: ubuntu-latest
    
    steps:
      # 1️⃣ Checkout do código
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2️⃣ Configurar Java/Maven
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3️⃣ Build do backend
      - name: BE - Compilar projeto
        run: |
          echo "🏗️ Iniciando build do backend..."
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests
          echo "✅ Build concluído com sucesso."

      # 4️⃣ Criar chave SSH para o runner
      - name: Criar chave SSH
        run: |
          echo "🔧 Criando chave SSH para o runner..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          echo "✅ Chave criada."

      # 5️⃣ Deploy do Backend no Host B (via Host A)
      - name: BE - Deploy no Host Privado (via Bastion)
        run: |
          # --- !! MUDANÇA CRÍTICA !! ---
          # set -e: Falha o script se qualquer comando falhar
          # set -o pipefail: Falha o script se qualquer parte de um "pipe" (|) falhar
          set -e
          set -o pipefail
          # ------------------------------

          mkdir -p logs
          
          # --- Define as variáveis para clareza ---
          HOST_A=${{ secrets.REMOTE_HOST }}      # IP Público (Frontend/Bastion)
          HOST_B=${{ secrets.REMOTE_HOST_B }}    # IP Privado (Backend)
          USER=${{ secrets.REMOTE_USER }}        # ec2-user
          KEY_PATH=~/.ssh/private_key.pem       # Chave no runner

          echo "🛰️ Iniciando deploy do BACKEND para host_b ($HOST_B) via host_a ($HOST_A)..."
          
          echo "📦 [1/3] Enviando código para host_a (bastion)..."
          rsync -rltgoDzvO --delete \
            -e "ssh -i $KEY_PATH -o StrictHostKeyChecking=no" \
            "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima/" \
            "$USER@$HOST_A:/home/$USER/backend_temp_deploy" \
            | tee logs/rsync_to_a.log

          echo "🔄 [2/3] Conectando no host_a e disparando deploy de ARQUIVOS para host_b..."
          # Este comando conecta no Host A...
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no $USER@$HOST_A "\
              set -e && \
              mkdir -p ~/logs && \
              echo '...[Host A] Copiando chave para o bastion...' && \
              echo '${{ secrets.EC2_SSH_KEY }}' > ~/private_key.pem && chmod 600 ~/private_key.pem && \
              \
              echo '...[Host A] Copiando arquivos de bastion -> host_b ($HOST_B)...' && \
              rsync -rltgoDzvO --delete \
                -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no' \
                /home/$USER/backend_temp_deploy/ \
                $USER@$HOST_B:/home/$USER/backend" \
            | tee logs/rsync_to_b.log

          echo "🚀 [3/3] Conectando no host_a e disparando INSTALAÇÃO/BUILD do Docker no host_b..."
          # Este comando conecta no Host A...
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no $USER@$HOST_A "\
              set -e && \
              echo '...[Host A] Conectando no host_b ($HOST_B) para rodar o Docker...' && \
              \
              # ...que por sua vez conecta no Host B para rodar o script final
              ssh -i ~/private_key.pem -o StrictHostKeyChecking=no $USER@$HOST_B '\
                set -e && \
                LOG_DIR=\"/home/$USER/backend/logs\" && \
                mkdir -p \$LOG_DIR && \
                LOG_FILE=\"\$LOG_DIR/deploy_\$(date +%Y%m%d_%H%M%S).log\" && \
                { \
                  echo \"...[Host B] Iniciando deploy no host_b...\" && \
                  \
                  # --- !! LÓGICA DE INSTALAÇÃO DO DOCKER CORRIGIDA !! --- \
                  if ! command -v docker &> /dev/null; then \
                    echo \"...[Host B] ⚙️ Docker não encontrado. Instalando Docker...\" && \
                    if command -v amazon-linux-extras &> /dev/null; then \
                      echo \"...[Host B] Detectado Amazon Linux 2. Usando 'amazon-linux-extras'....\" && \
                      sudo amazon-linux-extras install docker -y ; \
                    elif command -v dnf &> /dev/null; then \
                      echo \"...[Host B] Detectado RHEL/Fedora/AL2023. Usando 'dnf'....\" && \
                      sudo dnf install -y docker ; \
                    elif command -v apt-get &> /dev/null; then \
                      echo \"...[Host B] Detectado Debian/Ubuntu. Usando 'apt-get'....\" && \
                      sudo apt-get update && sudo apt-get install -y docker.io ; \
                    elif command -v yum &> /dev/null; then \
                      echo \"...[Host B] Detectado RHEL/CentOS. Usando 'yum'....\" && \
                      sudo yum install -y docker ; \
                    else \
                      echo \"...[Host B] ERRO: Não foi possível determinar o gerenciador de pacotes.\" && exit 1 ; \
                    fi && \
                    \
                    echo \"...[Host B] Iniciando e ativando o serviço Docker...\" && \
                    sudo systemctl enable docker && \
                    sudo systemctl start docker && \
                    (sudo usermod -aG docker $USER || echo \"...[Host B] Aviso: Falha ao adicionar $USER ao grupo docker. Usando sudo.\") && \
                    echo \"...[Host B] ✅ Docker instalado.\" ; \
                  else \
                    echo \"...[Host B] ✅ Docker já está instalado.\" ; \
                  fi && \
                  # -------------------------------------------------- \
                  \
                  cd /home/$USER/backend && \
                  echo \"...[Host B] 🛑 Parando containers antigos...\" && \
                  (sudo docker stop mimastore-backend || true) && \
                  (sudo docker rm mimastore-backend || true) && \
                  echo \"...[Host B] 🏗️ Buildando nova imagem Docker...\" && \
                  sudo docker build -t mimastore-backend . 2>&1 | tee -a \"\$LOG_FILE\" && \
                  echo \"...[Host B] 🚀 Subindo novo container...\" && \
                  sudo docker run -d -p 8080:8080 --name mimastore-backend mimastore-backend 2>&1 | tee -a \"\$LOG_FILE\" && \
                  echo \"...[Host B] ✅ Backend (host_b) atualizado e rodando!\" \
                } | tee -a \"\$LOG_FILE\" \
              ' \
            " | tee logs/deploy_docker_on_b.log

          echo "✅ Deploy finalizado para host_b"
