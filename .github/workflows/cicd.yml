name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: BE - Compilar projeto
        run: |
          echo "üèóÔ∏è Iniciando build do backend..."
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests
          echo "‚úÖ Build conclu√≠do com sucesso."

      - name: Criar chaves SSH para Zona 1 e Zona 2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY_AB }}" > ~/.ssh/private_key_ab.pem
          chmod 600 ~/.ssh/private_key_ab.pem
          echo "${{ secrets.EC2_SSH_KEY_CD }}" > ~/.ssh/private_key_cd.pem
          chmod 600 ~/.ssh/private_key_cd.pem
          ls -lah ~/.ssh

      - name: Criar script de deploy para hosts privados
        run: |
          PROJETO_DIR="Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mkdir -p "$PROJETO_DIR"

          cat << 'EOF' > "$PROJETO_DIR/deploy_on_privado.sh"
          #!/bin/bash
          set -euo pipefail

          # ‚úÖ Corrige permiss√£o do Docker socket
          sudo chmod 666 /var/run/docker.sock || true

          PROJETO_DIR="$HOME/backend"
          DB_DIR="$PROJETO_DIR/Banco de Dados"
          BACKEND_DIR="$PROJETO_DIR/JavaSpringBoot/projetoMima"

          COMPOSE_CMD=""
          if docker compose version &> /dev/null; then
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          fi

          if [ -z "$COMPOSE_CMD" ]; then
            DOCKER_COMPOSE_VERSION=2.24.0
            sudo curl -SL "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose || true
            COMPOSE_CMD="docker-compose"
          fi

          echo "üåê Verificando se a rede 'mima-network' existe..."
          if ! docker network ls --format '{{.Name}}' | grep -q '^mima-network$'; then
            echo "üß© Criando rede Docker: mima-network"
            sudo docker network create mima-network || true
          else
            echo "‚úÖ Rede 'mima-network' j√° existe."
          fi

          if [ -d "$DB_DIR" ]; then
            echo "üóÑÔ∏è Subindo containers do Banco de Dados..."
            cd "$DB_DIR"
            sudo $COMPOSE_CMD down -v || true
            sudo $COMPOSE_CMD up -d --build
          fi

          if [ -d "$BACKEND_DIR" ]; then
            echo "‚öôÔ∏è Subindo containers do Backend..."
            cd "$BACKEND_DIR"
            sudo $COMPOSE_CMD down -v || true
            sudo $COMPOSE_CMD up -d --build
          fi
          EOF

          chmod +x "$PROJETO_DIR/deploy_on_privado.sh"

      - name: BE - Deploy nos Hosts Privados (A‚ÜíB e C‚ÜíD)
        run: |
          set -euo pipefail

          HOST_A=${{ secrets.REMOTE_HOST }}
          HOST_B=${{ secrets.REMOTE_HOST_B }}
          HOST_C=${{ secrets.REMOTE_HOST_C }}
          HOST_D=${{ secrets.REMOTE_HOST_D }}
          USER=${{ secrets.REMOTE_USER }}

          KEY_AB=~/.ssh/private_key_ab.pem
          KEY_CD=~/.ssh/private_key_cd.pem

          try_scp() {
            local key="$1"
            local src="$2"
            local dest="$3"
            local tries=3
            local delay=3
            local attempt=1
            while [ $attempt -le $tries ]; do
              scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i "$key" "$src" "$dest" && return 0 || true
              sleep $delay
              attempt=$((attempt+1))
              delay=$((delay*2))
            done
            return 1
          }

          echo "üöÄ Iniciando deploy na Zona 1 (A ‚Üí B)..."
          try_scp "$KEY_AB" "$KEY_AB" "$USER@$HOST_A:~/private_key.pem"
          ssh -i "$KEY_AB" -o StrictHostKeyChecking=no $USER@$HOST_A "chmod 600 ~/private_key.pem"

          echo "üì¶ Enviando c√≥digo para Host A..."
          rsync -avz -e "ssh -i $KEY_AB -o StrictHostKeyChecking=no" "Sprint 4 - CleanArch/" "$USER@$HOST_A:/home/$USER/backend_temp_deploy"

          echo "üîÅ Replicando c√≥digo de A ‚Üí B..."
          ssh -i "$KEY_AB" -o StrictHostKeyChecking=no $USER@$HOST_A "rsync -avz -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no' /home/$USER/backend_temp_deploy/ $USER@$HOST_B:/home/$USER/backend"

          echo "‚öôÔ∏è Executando script de deploy no Host B..."
          ssh -i "$KEY_AB" -o StrictHostKeyChecking=no $USER@$HOST_A "ssh -i ~/private_key.pem -o StrictHostKeyChecking=no $USER@$HOST_B 'bash /home/$USER/backend/JavaSpringBoot/projetoMima/deploy_on_privado.sh'"

          echo "üöÄ Iniciando deploy na Zona 2 (C ‚Üí D)..."
          try_scp "$KEY_CD" "$KEY_CD" "$USER@$HOST_C:~/private_key.pem"
          ssh -i "$KEY_CD" -o StrictHostKeyChecking=no $USER@$HOST_C "chmod 600 ~/private_key.pem"

          echo "üì¶ Enviando c√≥digo para Host C..."
          rsync -avz -e "ssh -i $KEY_CD -o StrictHostKeyChecking=no" "Sprint 4 - CleanArch/" "$USER@$HOST_C:/home/$USER/backend_temp_deploy"

          echo "üîÅ Replicando c√≥digo de C ‚Üí D..."
          ssh -i "$KEY_CD" -o StrictHostKeyChecking=no $USER@$HOST_C "rsync -avz -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no' /home/$USER/backend_temp_deploy/ $USER@$HOST_D:/home/$USER/backend"

          echo "‚öôÔ∏è Executando script de deploy no Host D..."
          ssh -i "$KEY_CD" -o StrictHostKeyChecking=no $USER@$HOST_C "ssh -i ~/private_key.pem -o StrictHostKeyChecking=no $USER@$HOST_D 'bash /home/$USER/backend/JavaSpringBoot/projetoMima/deploy_on_privado.sh'"
