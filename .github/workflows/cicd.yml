name: CI/CD - Backend MimaStore

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: BE - Compilar projeto
        run: |
          echo "🏗️ Iniciando build do backend..."
          cd "Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mvn clean package -DskipTests
          echo "✅ Build concluído com sucesso."

      - name: Criar chave SSH
        run: |
          echo "[INFO] Criando chave SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem

      - name: Criar script de deploy para hosts privados
        run: |
          echo "[INFO] Criando script deploy_on_privado.sh..."
          PROJETO_DIR="Sprint 4 - CleanArch/JavaSpringBoot/projetoMima"
          mkdir -p "$PROJETO_DIR"
          
          cat << 'EOF' > "$PROJETO_DIR/deploy_on_privado.sh"
          #!/bin/bash
          set -e
          set -x

          PROJETO_DIR="$HOME/backend"
          DB_DIR="$HOME/backend/../Banco de Dados"
          LOG_DIR="$PROJETO_DIR/logs"
          LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"

          mkdir -p $LOG_DIR
          exec > >(tee -a "$LOG_FILE") 2>&1

          echo "🚀 Iniciando deploy completo (banco + backend)..."

          if ! command -v docker &> /dev/null; then
            echo "[INFO] Instalando Docker..."
            if command -v amazon-linux-extras &> /dev/null; then
              sudo amazon-linux-extras install docker -y
            elif command -v dnf &> /dev/null; then
              sudo dnf install -y docker
            elif command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y docker.io
            else
              sudo yum install -y docker
            fi
            sudo systemctl enable docker
            sudo systemctl start docker
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "[INFO] Instalando Docker Compose..."
            DOCKER_COMPOSE_VERSION=2.24.0
            sudo curl -L "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          echo "[INFO] ✅ Docker e Compose prontos."

          cd "backend/Banco de dados"
          echo "[INFO] Parando containers antigos..."
          sudo docker-compose down || true

          echo "[INFO] Subindo containers do banco..."
          sudo docker-compose up -d --build

          cd /. 
          cd
          cd "backend/JavaSpringBoot/projetoMima"
          echo "[INFO] Subindo container do backend..."
          sudo docker-compose down || true
          sudo docker-compose up -d --build

          echo "[INFO] ✅ Deploy completo! Containers ativos:"
          sudo docker ps
          EOF

          chmod +x "$PROJETO_DIR/deploy_on_privado.sh"

      - name: BE - Deploy nos Hosts Privados (A→B e C→D)
        run: |
          set -e
          set -x
          mkdir -p logs
          
          # 🧩 Hosts originais
          HOST_A=${{ secrets.REMOTE_HOST }}
          HOST_B=${{ secrets.REMOTE_HOST_B }}
          
          # 🧩 Novos hosts
          HOST_C=${{ secrets.REMOTE_HOST_C }}
          HOST_D=${{ secrets.REMOTE_HOST_D }}

          USER=${{ secrets.REMOTE_USER }}
          KEY_PATH=~/.ssh/private_key.pem

          echo "[INFO] Iniciando deploy completo nos pares (A→B e C→D)"
          
          # ==========================================================
          # 1️⃣ Deploy para A → B
          # ==========================================================
          echo "[INFO] 📦 Enviando código para bastion (Host A)..."
          rsync -rltgoDzvO --delete \
            -e "ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60" \
            "Sprint 4 - CleanArch/" \
            "$USER@$HOST_A:/home/$USER/backend_temp_deploy" \
            | tee logs/rsync_to_a.log

          echo "[INFO] 🔄 Copiando do bastion A para Host B..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_A "\
            set -x && \
            echo '${{ secrets.EC2_SSH_KEY }}' > ~/private_key.pem && chmod 600 ~/private_key.pem && \
            rsync -rltgoDzvO --delete \
              -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60' \
              /home/$USER/backend_temp_deploy/ \
              $USER@$HOST_B:/home/$USER/backend" \
            | tee logs/rsync_to_b.log

          echo "[INFO] 🚀 Executando deploy_on_privado.sh no Host B..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_A "\
            ssh -i ~/private_key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_B 'bash /home/$USER/backend/JavaSpringBoot/projetoMima/deploy_on_privado.sh'" \
            | tee logs/deploy_b.log

          # ==========================================================
          # 2️⃣ Deploy para C → D
          # ==========================================================
          echo "[INFO] 📦 Enviando código para bastion (Host C)..."
          rsync -rltgoDzvO --delete \
            -e "ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60" \
            "Sprint 4 - CleanArch/" \
            "$USER@$HOST_C:/home/$USER/backend_temp_deploy" \
            | tee logs/rsync_to_c.log

          echo "[INFO] 🔄 Copiando do bastion C para Host D..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_C "\
            set -x && \
            echo '${{ secrets.EC2_SSH_KEY_CD || secrets.EC2_SSH_KEY }}' > ~/private_key.pem && chmod 600 ~/private_key.pem && \
            rsync -rltgoDzvO --delete \
              -e 'ssh -i ~/private_key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60' \
              /home/$USER/backend_temp_deploy/ \
              $USER@$HOST_D:/home/$USER/backend" \
            | tee logs/rsync_to_d.log

          echo "[INFO] 🚀 Executando deploy_on_privado.sh no Host D..."
          ssh -i $KEY_PATH -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_C "\
            ssh -i ~/private_key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 $USER@$HOST_D 'bash /home/$USER/backend/JavaSpringBoot/projetoMima/deploy_on_privado.sh'" \
            | tee logs/deploy_d.log
