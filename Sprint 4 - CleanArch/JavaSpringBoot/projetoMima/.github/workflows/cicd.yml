name: CI/CD para EC2 pública e privada

on:
  push:
    branches:
      - main # Branch que acionará o deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configuração do ambiente Java/Maven
      - name: BE - Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' 
          java-version: '21'
          cache: 'maven'

      # 3. Executar testes automatizados (se desejar)
      - name: BE - Executar Testes automatizados
        run: mvn clean test
        working-directory: ./backend  # Ajuste conforme a pasta do seu projeto

      # 4. Gerar artefato .jar
      - name: BE - Gerar Artefato .JAR
        run: mvn package -DskipTests=true
        working-directory: ./backend

      # 5. Renomear o .jar para nome fixo
      - name: BE - Renomear JAR para app_loko.jar
        run: |
          JAR_NAME=$(ls target/*.jar)
          mv $JAR_NAME target/app_loko.jar
          echo "Renomeado para: target/app_loko.jar"
        working-directory: ./backend

      # 6. Copiar o .jar para a EC2 pública via SSH/rsync
      - name: BE - Copiar arquivos e Deploy (EC2 pública)
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/${{ secrets.REMOTE_USER }}/backend
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "./backend/target/*.jar"

      # 7. Enviar o .jar da EC2 pública para a privada e reiniciar serviço
      - name: BE - Deploy para EC2 privada via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            ARQUIVO_PEM="/home/${{ secrets.REMOTE_USER }}/chavetmp.pem"
            rm -f $ARQUIVO_PEM
            echo "${{ secrets.EC2_SSH_KEY }}" > $ARQUIVO_PEM
            chmod 400 $ARQUIVO_PEM

            USUARIO_IP=${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }}

            # Enviando o .jar para a EC2 privada
            scp -o StrictHostKeyChecking=no -i $ARQUIVO_PEM /home/${{ secrets.REMOTE_USER }}/backend/app_loko.jar $USUARIO_IP:/usr/share/api/app_loko.jar

            # Reiniciando o serviço via docker compose
            ssh -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker compose restart api'
